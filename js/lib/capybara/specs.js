// Generated by CoffeeScript 1.3.3
(function() {

  window.Capybara || (window.Capybara = {});

  Capybara.Specs = (function() {

    Specs.prototype.generators = [];

    function Specs(options) {
      this.generators = [];
      this.tabURL = options.tabURL;
    }

    Specs.prototype.add = function(data) {
      switch (data.type) {
        case 'action':
          return this.generators.push(new Capybara.Generators.Action(data));
        case 'matcher':
          return this.generators.push(new Capybara.Generators.Matcher(data));
      }
    };

    Specs.prototype.setName = function(name) {
      return this.name = name;
    };

    Specs.prototype.generate = function() {
      var depth, generator, generatorScope, path, scope, strings, _i, _len, _ref, _ref1;
      _ref = [0, [], null], depth = _ref[0], strings = _ref[1], scope = _ref[2];
      strings.push("it '" + (this.name || "SHOULDDOSOMETHING") + "' do");
      depth++;
      path = this._parseURL(this.tabURL).pathname;
      strings.push(this._indent("visit('" + path + "')", depth));
      _ref1 = this.generators;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        generator = _ref1[_i];
        if (generator.isScoped()) {
          generatorScope = generator.scopeToPartials();
          if ((scope != null) && scope.join('') !== generatorScope.join('')) {
            strings.push(this._indent(_.last(generatorScope), --depth));
            scope = null;
          }
          if (!scope) {
            scope = generatorScope;
            strings.push(this._indent(_.first(generatorScope), depth++));
          }
        } else {
          if (scope != null) {
            strings.push(this._indent(_.last(scope), --depth));
            scope = null;
          }
        }
        strings.push(this._indent(generator.toString(), depth));
      }
      if (scope != null) {
        strings.push(this._indent(_.last(scope), --depth));
      }
      strings.push('end');
      return strings.join('\n');
    };

    Specs.prototype._indent = function(line, depth, indentation) {
      if (depth == null) {
        depth = 0;
      }
      if (indentation == null) {
        indentation = '  ';
      }
      while (depth-- > 0) {
        line = indentation + line;
      }
      return line;
    };

    Specs.prototype._parseURL = function(url) {
      var a;
      a = document.createElement('a');
      a.href = url;
      return a;
    };

    return Specs;

  })();

}).call(this);
