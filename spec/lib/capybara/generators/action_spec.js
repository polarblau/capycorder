// Generated by CoffeeScript 1.3.3
(function() {

  describe('Capybara action generator', function() {
    describe('#isScoped', function() {
      it('should return true if scope provided', function() {
        var generator;
        generator = new Capybara.Generators.Action({
          scope: '#foo'
        });
        return expect(generator.isScoped()).toBeTruthy();
      });
      return it('should return false if no scope provided', function() {
        var generator;
        generator = new Capybara.Generators.Action;
        return expect(generator.isScoped()).toBeFalsy();
      });
    });
    return describe('templates', function() {
      var allOptions, generator;
      generator = null;
      allOptions = {
        scope: '#foo',
        locator: 'Foo',
        options: {
          path: '/foo/bar',
          file: 'foo/bar.png',
          "with": 'foobar',
          from: 'foo'
        }
      };
      describe('#scopeTemplate', function() {
        beforeEach(function() {
          return generator = new Capybara.Generators.Action(allOptions);
        });
        it('should return an array', function() {
          return expect(typeof generator.scopeToPartials()).toBe('object');
        });
        return it('should match a tempate', function() {
          var out;
          out = generator.scopeToPartials();
          expect(out.length).toEqual(2);
          expect(out[0]).toBe("within('#foo') do");
          return expect(out[1]).toBe('end');
        });
      });
      return describe('#toString', function() {
        it('should return correct template for attachFile', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'attachFile'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("attach_file('Foo', 'foo/bar.png')");
        });
        it('should return correct template for check', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'check'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("check('Foo')");
        });
        it('should return correct template for uncheck', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'uncheck'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("uncheck('Foo')");
        });
        it('should return correct template for choose', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'choose'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("choose('Foo')");
        });
        it('should return correct template for clickButton', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'clickButton'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("click_button('Foo')");
        });
        it('should return correct template for fillIn', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'fillIn'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("fill_in('Foo', :with => 'foobar')");
        });
        it('should return correct template for select', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'select'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("select('Foo', :from => 'foo')");
        });
        it('should return correct template for clickLink', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'clickLink'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("click_link('Foo')");
        });
        return it('should return correct template for visitPath', function() {
          var options;
          options = _.extend(allOptions, {
            name: 'visitPath'
          });
          generator = new Capybara.Generators.Action(options);
          return expect(generator.toString()).toBe("visit('/foo/bar')");
        });
      });
    });
  });

}).call(this);
